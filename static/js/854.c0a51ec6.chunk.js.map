{"version":3,"file":"static/js/854.c0a51ec6.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.js","components/NotFound/NotFound.styled.jsx","components/NotFound/NotFound.js","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.js","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 30px;\r\n  height: 70vh;\r\n`;\r\n","import React from \"react\";\r\nimport { RotatingLines } from \"react-loader-spinner\";\r\nimport { Wrap } from \"./Loader.styled\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <Wrap>\r\n      <h2>Завантаження...</h2>\r\n      <RotatingLines\r\n        strokeColor=\"#ea5f5f\"\r\n        strokeWidth=\"5\"\r\n        animationDuration=\"0.75\"\r\n        width=\"96\"\r\n        visible={true}\r\n      />\r\n    </Wrap>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n","import React from \"react\";\r\nimport { Wrapper } from \"./NotFound.styled\";\r\nimport notFoundImg from \"../../img/image-not-found.png\";\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <Wrapper>\r\n      <img src={notFoundImg} alt=\"Зображення не знайдено\" />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import styled from \"styled-components\";\r\nimport { MdSearch } from \"react-icons/md\";\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  width: 200px;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 15px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  position: relative;\r\n  height: 25px;\r\n  min-width: 250px;\r\n  background-color: #353340;\r\n  color: #ffffff;\r\n  border: none;\r\n  border-radius: 8px;\r\n  padding: 2px 31px 3px 10px;\r\n  font-size: 14px;\r\n  font-weight: 300;\r\n  box-shadow: 0 0 0 2px #868ca005;\r\n\r\n  &::placeholder {\r\n    color: #808191;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  position: absolute;\r\n  right: 0;\r\n  border: 0;\r\n  background-color: transparent;\r\n`;\r\n\r\nexport const Search = styled(MdSearch)`\r\n  font-size: 21px;\r\n  opacity: 0.6;\r\n`;\r\n","import Loader from \"components/Loader/Loader\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\r\nimport api from \"services/api\";\r\nimport NotFound from \"components/NotFound/NotFound\";\r\nimport { Input, Form, Item, List, Button, Search } from \"./Movies.styled\";\r\n\r\nconst Movies = () => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const query = searchParams.get(\"query\") ?? \"\";\r\n  const [films, setFilms] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (query === \"\") return;\r\n\r\n    const fetchSearchMovie = async (query) => {\r\n      try {\r\n        setIsLoading(true);\r\n        const film = await api.getSearchMovies(query);\r\n        setFilms(film.results);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        setIsLoading(false);\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchSearchMovie(query);\r\n  }, [query]);\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    const form = evt.currentTarget;\r\n    setSearchParams({ query: form.elements.query.value });\r\n    // form.elements.query.value = \"\";\r\n    form.reset();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"query\"\r\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          // title=\"Може містити тільки літери, апостроф, тире та пробіли. Наприклад 'луна'\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Пошук фільму...\"\r\n        />\r\n        <Button type=\"submit\">\r\n          <Search />\r\n        </Button>\r\n      </Form>\r\n\r\n      {films.length > 0 && (\r\n        <div>\r\n          {isLoading ? (\r\n            <Loader />\r\n          ) : (\r\n            <List>\r\n              {films.map((film) => {\r\n                return (\r\n                  <Item key={film.id}>\r\n                    <Link to={`${film.id}`} state={{ from: location }}>\r\n                      {film.poster_path ? (\r\n                        <img\r\n                          id={film.id}\r\n                          src={`https://image.tmdb.org/t/p/w500/${film.poster_path}`}\r\n                          alt={film.title}\r\n                          loading=\"lazy\"\r\n                        />\r\n                      ) : (\r\n                        <NotFound />\r\n                      )}\r\n                    </Link>\r\n                    <p>\r\n                      <span>{film.vote_average.toFixed(1)}</span>\r\n                    </p>\r\n\r\n                    <div>\r\n                      <p>\r\n                        {film.title} | {film.release_date.slice(0, 4)}\r\n                      </p>\r\n                    </div>\r\n                  </Item>\r\n                );\r\n              })}\r\n            </List>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\r\nconst API_KEY = \"060719e53fa713f801520e62e92850bd\";\r\n// const PER_PAGE = 12;\r\n\r\nconst getTrendingMovieDay = async (page) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `/trending/movie/day?api_key=${API_KEY}&page=${page}&language=uk-UA`\r\n    );\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nconst getSearchMovies = async (query, page) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `/search/movie?api_key=${API_KEY}&page=1&language=uk-UA&query=${query}&include_adult=true`\r\n    );\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nconst getMoviesDetails = async (id) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `/movie/${id}?api_key=${API_KEY}&&language=uk-UA`\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nconst getMoviesCredits = async (id) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `/movie/${id}/credits?api_key=${API_KEY}&&language=uk-UA`\r\n    );\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nconst getMoviesReviews = async (id) => {\r\n  try {\r\n    const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\r\n\r\n    return response.data.results;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nconst fetchGenreMovie = async () => {\r\n  const response = await axios.get(\r\n    `/genre/movie/list?api_key=${API_KEY}&language=uk-UA`\r\n  );\r\n\r\n  return response.data.genres;\r\n};\r\n\r\nconst fetchTrailersOfMovie = async (id) => {\r\n  try {\r\n    const responce = await axios.get(\r\n      `https://imdb-api.com/en/API/Trailer/k_mlq541ll/${id}`\r\n    );\r\n\r\n    return responce;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst api = {\r\n  getTrendingMovieDay,\r\n  getSearchMovies,\r\n  getMoviesDetails,\r\n  getMoviesCredits,\r\n  getMoviesReviews,\r\n  fetchGenreMovie,\r\n  fetchTrailersOfMovie,\r\n};\r\n\r\nexport default api;\r\n"],"names":["Wrap","styled","_templateObject","_taggedTemplateLiteral","_jsxs","children","_jsx","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","Wrapper","src","notFoundImg","alt","List","Item","_templateObject2","Form","_templateObject3","Input","_templateObject4","Button","_templateObject5","Search","MdSearch","_templateObject6","_searchParams$get","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","query","get","_useState","useState","_useState2","films","setFilms","_useState3","_useState4","isLoading","setIsLoading","location","useLocation","useEffect","fetchSearchMovie","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","film","wrap","_context","prev","next","api","sent","results","t0","console","log","stop","_x","apply","arguments","onSubmit","evt","preventDefault","form","currentTarget","elements","value","reset","type","name","autoComplete","autoFocus","placeholder","length","Loader","map","Link","to","concat","id","state","from","poster_path","title","loading","NotFound","vote_average","toFixed","release_date","slice","axios","API_KEY","getTrendingMovieDay","page","response","abrupt","data","error","getSearchMovies","_ref2","_callee2","_context2","_x2","_x3","getMoviesDetails","_ref3","_callee3","_context3","_x4","getMoviesCredits","_ref4","_callee4","_context4","_x5","getMoviesReviews","_ref5","_callee5","_context5","_x6","fetchGenreMovie","_ref6","_callee6","_context6","genres","fetchTrailersOfMovie","_ref7","_callee7","responce","_context7","_x7"],"sourceRoot":""}